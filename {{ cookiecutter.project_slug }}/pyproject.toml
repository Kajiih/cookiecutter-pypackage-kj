{%- set is_open_source = cookiecutter.open_source_license != 'Not open source' -%}
{%- set license_classifiers = {
    'MIT license': 'License :: OSI Approved :: MIT License',
    'BSD license': 'License :: OSI Approved :: BSD License',
    'ISC license': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
    'GNU General Public License v3': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} -%}

[build-system]
requires = ["hatchling", "hatch-requirements-txt"]
build-backend = "hatchling.build"

[project]
name = "{{cookiecutter.project_slug}}"
dynamic = ["version", "dependencies", "optional-dependencies"]
description = "{{cookiecutter.project_short_description}}"
readme = "README.md"
{% if is_open_source -%}
license = { file = "LICENSE" }
{% endif -%}
requires-python = ">={{cookiecutter.minimal_python_version}}"
keywords = ["python"] # TODO: Add these
authors = [{ name = "{{cookiecutter.full_name}}", email = "{{cookiecutter.email}}" }]
classifiers = [ # https://pypi.org/classifiers/
    "Development Status :: 2 - Pre-Alpha",
    {% if cookiecutter.open_source_license in license_classifiers -%}
    "{{ license_classifiers[cookiecutter.open_source_license] }}",
    {% endif -%}
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: {{cookiecutter.minimal_python_version}}",
    "Programming Language :: Python :: Implementation :: CPython",
]

    [project.urls] # TODO: Add these
    Homepage = "https://example.com"
    Documentation = "https://{{ cookiecutter.project_slug | replace('_', '-') }}.readthedocs.io"
    Repository = "https://github.com/{{cookiecutter.__gh_slug}}"
    Issues = "https://github.com/{{cookiecutter.__gh_slug}}/issues"
    Changelog = "https://github.com/{{cookiecutter.__gh_slug}}/blob/main/changelog.md"


[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements/base.txt"]
    [tool.hatch.metadata.hooks.requirements_txt.optional-dependencies]
    dev = ["requirements/dev.txt"]

[tool.hatch.version]
path = "src/{{cookiecutter.project_slug}}/__about__.py"
[tool.hatch.build.targets.wheel]
packages = ["src/{{cookiecutter.project_slug}}"]

# === Ruff === #
[tool.ruff] # https://docs.astral.sh/ruff/settings
target-version = "py{{cookiecutter.minimal_python_version | replace('.', '') }}"
line-length = 120
src = ["src"]
# In addition to the standard set, include `.ipynb` files.
extend-include = ["*.ipynb"]

    [tool.ruff.lint]
    preview = true
    fixable = ["ALL"]
    select = [
        "RUF",  # Ruff specific rules
        "PL",   # Pylint
        "B",    # Bugbear
        "D",    # Docstring
        "D213", # Multi-line docstring summary should start at the second line
        "D401", # First line should be in imperative mood
        "D404", # First line should not start with this
        "I",    # Isort
        "C90",  # Mccabe complexity
        "UP",   # PyUpgrade
        "ANN",  # Type annotations
        "S",    # Bandit
        "A",    # flake8-builtins
        "C4",   # flake8-comprehensions
        "FA",   # flake8-future-annotations
        "ISC",  # flake8-implicit-str-concat
        "ICN",  # flake8-import-conventions
        "G",    # flake8-logging-format
        "LOG",  # flake8-logging
        "PIE",  # flake8-pie
        "PT",   # flake8-pytest-style
        "RET",  # flake8-return
        "SLF",  # flake8-self
        "SIM",  # flake8-simplify
        "TID",  # flake8-tidy-imports
        "TCH",  # flake8-type-checking
        "ARG",  # flake8-unused-arguments
        "PTH",  # flake8-use-pathlib
        "TD",   # flake8-todos
        "ERA",  # flake8-eradicate
        "TRY",  # tryceratops
        "NPY",  # numpy specefic rules
        "PERF", # Perflint
        "FURB", # refurb
        # "WPS",  # wemake-python-styleguide -> Not yet supported

    ]
    ignore = [
        "D105",   # Missing docstring in magic method
        "D107",   # Missing docstring in `__init__`
        "D212",   # Multi-line docstring summary should start at the first line
        "TD002",  # Missing author in TODO; try: `TODO(<author_name>): ...` or `TODO @<author_name>: ...`
        "TD003",  # Missing issue link on the line following this TODO
        "TD004",  # Missing colon after TODO
        "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in
        "RET504", # Unnecessary assignment to `...` before `return` statement

        # TODO: Comment out for produciton release
        "ERA001", # Found commented-out code
        "S101",   # Use of `assert` detected
    ]

        [tool.ruff.lint.per-file-ignores]
        "tests/*" = [
            "SLF001", # Private member accessed: `self._foo`
            "D100",   # Missing docstring in public module
            "D101",   # Missing docstring in public class
            "D102",   # Missing docstring in public method
            "D103",   # Missing docstring in public function
            "ANN",
        ]

        [tool.ruff.lint.pydocstyle]
        convention = "google"
        [tool.ruff.lint.pylint]
        max-args = 6
[tool.ruff.format]
preview = true
docstring-code-format = true

# == Pytest == #
[tool.pytest] # https://docs.pytest.org/en/stable/customize.html
    [tool.pytest.ini_options]
    markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]

    # testpaths = ["tests"]
    pythonpath = ["src"]

# == Coverage == #
[tool.coverage]
    [tool.coverage.run]
    source_pkgs = ["{{cookiecutter.project_slug}}", "tests"]
    branch = true
    parallel = true
    omit = ["src/{{cookiecutter.project_slug}}/__about__.py"]

    [tool.coverage.paths]
    PackageName = [
        "src/{{cookiecutter.project_slug}}",
        "*/{{cookiecutter.project_slug}}/src/{{cookiecutter.project_slug}}",
    ]
    tests = ["tests", "*/{{cookiecutter.project_slug}}/tests"]

    [tool.coverage.report]
    exclude_also = [
        "def __repr__",
        "def __str__",
        "if TYPE_CHECKING:",
        # "if __name__ == '__main__':",

        # Don't complain about missing debug-only code:
        # "if self\\.debug",
        # "if settings.DEBUG",

        # Don't complain if tests don't hit defensive assertion code:
        "raise AssertionError",
        "raise NotImplementedError",

        # Don't complain if non-runnable code isn't run:
        "if 0:",
        "if __name__ == .__main__.:",

        # Don't complain about abstract methods, they aren't run:
        "@(abc\\.)?abstractmethod",
    ]
